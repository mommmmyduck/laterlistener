from aiogram import F, Router
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, Voice, Audio
import os
from aiogram.filters import CommandStart, Command
from pydub import AudioSegment
from pydub.silence import detect_nonsilent
import logging
import app.keyboards as kb

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
    "üé§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ!\n\n"
    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.\n"
    "–ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
    "–°—Ç–æ–∏–º–æ—Å—Ç—å: X –∑–∞ –º–∏–Ω—É—Ç—É –∞—É–¥–∏–æ",
    parse_mode="Markdown",
    reply_markup=kb.main
)

#–ê –ù–£–ñ–ï–ù –õ–ò –•–ï–õ–ü?
@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:')

@router.message(F.text == '–í—ã–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ')
async def cmd_audio(message: Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª')


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–°
@router.message(F.voice)
async def handle_voice(message: Message):
    file_id = message.voice.file_id
    await process_audio(message, file_id, "voice")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–£–î–ò–û
@router.message(F.audio)
async def handle_audio(message: Message):
    file_id = message.audio.file_id
    await process_audio(message, file_id, "audio")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–ò–î–ï–û
async def handle_video(message: Message):
    file_id = message.video.file_id
    await process_video(message, file_id, "video")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–ê–ô–õ–û–í –ù–ï –Ø–í–õ–Ø–Æ–©–ò–•–°–Ø –ê–£–î–ò–û –ò–õ–ò –ì–° 
@router.message(F.photo | F.document | F.text)
async def handle_another_files(message: Message):
    await message.answer("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

async def process_video(message: Message, file_id: str, file_type: str):
    pass

async def process_audio(message: Message, file_id: str, file_type: str):
    logging.basicConfig(level=logging.INFO)
    try:
        # –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï
        bot = message.bot
        file = await bot.get_file(file_id)
        file_path = file.file_path    

        # –ò–ú–Ø –§–ê–ô–õ–ê
        file_name = f"{file_type}_{message.from_user.id}_{file_id[:8]}.ogg"
        save_path = os.path.join("downloads", file_name)


        await bot.download_file(file_path, destination=save_path)
        logging.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")

        # –ü–†–û–í–ï–†–ö–ê –ù–ê –ó–í–£–ö –í –§–ê–ô–õ–ï
        if not await has_audio(save_path):
            logging.error(f"–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–≤—É–∫–∞ –∏–ª–∏ –±–∏—Ç—ã–π")
            await message.answer('–§–∞–π–ª —Ç–∏—Ö–∏–π –∏–ª–∏ –±–∏—Ç—ã–π, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª')
            os.remove(save_path)
            return
        
        duration = message.voice.duration if file_type == "voice" else message.audio.duration
        cost = calculate_cost(duration)  # –°–¢–û–ò–ú–û–°–¢–¨
        prices = [LabeledPrice(label="XTR", amount=cost)] 
        await message.answer(
            f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω!\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 60}:{duration % 60:02d} –º–∏–Ω.\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} XTR")

        await message.answer_invoice(
            title="–û–ø–ª–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏",
            description=f"–°—É–º–º–∞: {cost} XTR",
            prices=prices,
            provider_token="",
            payload="trancrib_payment",
            currency="XTR",
            reply_markup=kb.payment_keyboard(cost), 
        )
    except Exception as e:
        logging.error(f"Error: {str(e)}")

async def has_audio(audio_path: str, silence_thresh=-50.0, min_silence_len=1000) -> bool:
    audio = AudioSegment.from_file(audio_path)
    nonsilent_ranges = detect_nonsilent(
        audio, 
        min_silence_len=min_silence_len, 
        silence_thresh=silence_thresh
    )
    return len(nonsilent_ranges) > 0

from aiogram.types import PreCheckoutQuery

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):  
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def success_payment_handler(message: Message):  
    await message.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–ø–ª–∞—Ç—É!ü§ó")


def calculate_cost(duration_sec: int) -> float:
    cost_per_minute = 1 # –ó–í–Å–ó–î–´
    minutes = max(1, (duration_sec + 59) // 60)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
    return minutes * cost_per_minute
#–¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø